{
  "questions": [
    {
      "id": 1,
      "question": "TypeScript is an _____ framework",
      "options": ["Licensed", "Open-sourced", "Commercial", "Both A and B"],
      "answer": "Open-sourced"
    },
    {
      "id": 2,
      "question": "TypeScript is a typed superset of _____",
      "options": ["C#", "Java", "JavaScript", "ReactJS"],
      "answer": "JavaScript"
    },
    {
      "id": 3,
      "question": "TypeScript files compile into ____",
      "options": ["JavaScript", "VBScript", "TypeScript", "None of the above"],
      "answer": "JavaScript"
    },
    {
      "id": 4,
      "question": "TypeScript can be used to write server side and client side applications",
      "options": ["true", "false"],
      "answer": "true"
    },
    {
      "id": 5,
      "question": "____ command is used to generate a JavaScript file from a TypeScript file",
      "options": [
        "npm filename.ts",
        "tsc fileName.ts",
        "tsc -js fileName.ts",
        "All of the above"
      ],
      "answer": "tsc fileName.ts"
    },
    {
      "id": 6,
      "question": "Which of the following statements declare a variable in TypeScript?",
      "options": [
        "var myVar = 123;",
        "var myVar:number = 123;",
        "let myVar:number = 123;",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "id": 7,
      "question": "Which of the following are primitive types supported in TypeScript?",
      "options": ["number", "string", "boolean", "All of the above"],
      "answer": "All of the above"
    },
    {
      "id": 8,
      "question": "Which of the following is a valid union type variable?",
      "options": [
        "var emp: [number, string] = [1, 'Jay'];",
        "var emp:(number | string) = 123",
        "var emp:string[] = ['Jay']",
        "None of the above"
      ],
      "answer": "var emp:(number | string) = 123"
    },
    {
      "id": 9,
      "question": "Which of the following is a valid tuple?",
      "options": [
        "var employee: [number, string] = [1, 'Jay']",
        "var employee:(number | string) = 123",
        "var employee = [1, 'Jay'];",
        "None of the above"
      ],
      "answer": "var employee: [number, string] = [1, 'Jay']"
    },
    {
      "id": 10,
      "question": "Type assertion in TypeScript is achieved using which of the following syntax?",
      "options": [
        "Using <type> syntax",
        "Using as syntax",
        "Both A and B",
        "None of the above"
      ],
      "answer": "Both A and B"
    },
    {
      "id": 11,
      "question": "What will be the output of the following code snippet? let arr =[10, 20, 30, 40]; for(var val of arr) {console.log(val); }",
      "options": [
        "prints 10,20,30,40",
        "prints 0,1,2,3",
        "prints undefined",
        "Compiler error"
      ],
      "answer": "prints 10,20,30,40"
    },
    {
      "id": 12,
      "question": "Which of the following is a valid arrow function?",
      "options": [
        "let sum = (x: number, y: number) => x + y",
        "let sum(): (x: number, y: number): => x + y",
        "let sum = (x: number, y: number) => return x + y",
        "let sum:(x: number, y: number) => x + y"
      ],
      "answer": "let sum = (x: number, y: number) => x + y"
    },
    {
      "id": 13,
      "question": "the rest parameters in a function are used when ____",
      "options": [
        "The types of parameters are not known",
        "The number of parameters are not known",
        "The function needs to be executed asynchronously",
        "The function is called recursively"
      ],
      "answer": "The number of parameters are not known"
    },
    {
      "id": 14,
      "question": "Which of the following statements are true?",
      "options": [
        "An interface can extend another interface in TypeScript",
        "An interface can extend a class in TypeScript",
        "TypeScript interface does not generate any JavaScript code",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "id": 15,
      "question": "Which of the following are valid data modifiers in TypeScript?",
      "options": ["public", "private", "protected", "All of the above"],
      "answer": "All of the above"
    },
    {
      "id": 16,
      "question": "Which of the following keywords is used to declare a module?",
      "options": ["export", "namespace", "type", "declare"],
      "answer": "export"
    },
    {
      "id": 17,
      "question": "Which of the following is declared a namespace?",
      "options": [
        "namespace test { }",
        "ns test { }",
        "Both A and B",
        "export test() { }"
      ],
      "answer": "namespace test { }"
    },
    {
      "id": 18,
      "question": "Which of the following commands is used to compile a module?",
      "options": [
        "tsc --module amd mymodule.ts",
        "tsc -m amd mymodule.ts",
        "Both A and B",
        "None of the above"
      ],
      "answer": "Both A and B"
    },
    {
      "id": 19,
      "question": "Which configuration file is required to compile the whole TypeScript project?",
      "options": ["tsconfig.js", "tsconfig.json", "web.config", "app.json"],
      "answer": "tsconfig.json"
    },

    {
      "id": 20,
      "question": "Which of the following statements is true?",
      "options": [
        "TypeScript supports generics",
        "TypeScript supports readonly and static members",
        "TypeScript supports abstract class",
        "All of the above"
      ],
      "answer": "All of the above"
    }
  ]
}
